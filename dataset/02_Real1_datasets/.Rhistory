# Load necessary libraries
library(jmotif)
library(profvis)
# Define constants
index_file <- 12
top_discords <- 1
SYMBOLS_SIZE <- 7
BIN_SIZE <- 20
WINDOW_SIZE <- 100
true_postive <- 0
# Extract data from the list of dataframes
temp_df <- data.frame(list_of_dfs[index_file][1])
## HOT-SAX
# Find discords using HOT-SAX algorithm
discords_data = find_discords_hotsax(temp_df$z_instances, WINDOW_SIZE, BIN_SIZE, SYMBOLS_SIZE,
0.01, 10)
# Plot the data
plot(x = temp_df$time_from_peak, y = temp_df$z_instances, type = "l",
xlab = "Time from flare peak (sec)",
ylab = "flux",
col = "black", main = temp_df$file_name[1])
# Add a vertical line at time peak
abline(v = 0, col = "blue", lwd = 1, lty = 2)
# Add a red line for the discord region
lines(x = c(temp_df$time_from_peak[discords_data[top_discords, 2]:(discords_data[top_discords, 2] + WINDOW_SIZE)]),
y = temp_df$z_instances[discords_data[top_discords, 2]:(discords_data[top_discords, 2] + WINDOW_SIZE)],
col = "red")
# Calculate true positive or false negative
alarm_timestamps <- temp_df$time_from_peak[discords_data[top_discords, 2]:(discords_data[top_discords, 2] + WINDOW_SIZE)]
print((alarm_timestamps[1] < 0) & (0 < alarm_timestamps[length(alarm_timestamps)]))
citation("tsmp")
View(list_of_dfs)
library(tsmp)
install.packages('tsmp')
install.packages('tsmp')
libaray('tsmp')
libray('tsmp')
library('tsmp')
data <- mp_fluss_data$walkjogrun$data
plot(data)
plot(data,type="l")
install.packages("devtools")
devtools::install_github("FinYang/tsdl")
co2
a<co2
a <-CO2
a ts(co2)
co2
library(forecast)
data("co2")
a <- co2
q()
data <- c(1.0, 2.0, 1.0, -1.0, 1.5)
a <- periodogram(data)
library("jsonlite")
library('TSA')
a <- periodogram(data)
FF = abs(fft(data)/sqrt(5))^2
P = (4/5)*FF[1:2]
f = (0:2)/5
f = (0:1)/5
f = (0:2)/5
plot(f, P, type="l")
plot(f[2:3], P, type="l")
q()
x = scan("cortex.dat")
q()
q()
q()
q()
q()
# Specify the package name
package_name <- "astsa"
# Load the package
library(package_name, character.only = TRUE)
# List datasets in the package
dataset_names <- data(package = package_name)$results[, "Item"]
result_df <- data.frame(Dataset = character(), Length = numeric(), Frequency = numeric())
for (dataset_name in dataset_names) {
frequency_val <- frequency(get(dataset_name))
length_val<- length(get(dataset_name))
if((length_val>frequency_val*5)&(length(dim(get(dataset_name))))==0){
row <- data.frame(Dataset = dataset_name,
Length = length_val, Frequency = frequency_val)
result_df <- rbind(result_df, row)
}
}
filtered_dataset <- subset(result_df, Frequency > 3)
q()
q()
q()
q()
a <- calls
library(fpp2)
a <- calls
dataset_name = 'calls'
frequency_val <- frequency(get(dataset_name))
length_val <- length(get(dataset_name))
z_normalized_data <- z_normalize(ts)
z_normalize <- function(x) {
mean_value <- mean(x)
std_dev <- sd(x)
z_normalized_data <- (x - mean_value) / std_dev
return(z_normalized_data)
}
z_normalized_data <- z_normalize(ts)
ts <- get(dataset_name)
z_normalized_data <- z_normalize(ts)
msts_data <- msts(z_normalized_data, seasonal.periods = m)
m <- c(frequency_val)
library('stR')
library("jsonlite")
msts_data <- msts(z_normalized_data, seasonal.periods = m)
decomp<-AutoSTR(msts_data, trace = TRUE)
q()
library('fpp2')
library('fma')
library('astsa')
length(chicken)
q()
library(fma)
length(chicken)
library(expsmooth)
library(fpp2)
library(astsa)
q()
library(fma)
oil
sales
chicken
library(fpp2)
oil
oilprice
q()
library(astsa)
oil
length(oil)
q()
library(astsa)
gas
frequency(gas)
library("fma")
library("fpp2")
library("expsmooth")
library("astsa")
gas
a<-gas
frequency(a)
autoplot(gas)
q()
library(astsa)
plot(oil,type='l')
library(fpp2)
length(gasoline)
library(forecast)
library("jsonlite")
library('sazedR')
library('forecast')
library("fma")
library("fpp2")
library("expsmooth")
library("astsa")
length(gasoline)
gas
length(gas)
frequency(gas)
q()
libray(fma)
library(fma)
beer
frequency(beer)
q()
library(fma)
CO2
library(astsa)
a <- co2
CO2
library(fma)
library(fpp2)
CO2
q()
library(fpp2)
length(Elecequip)
elecequip
length(elecequip)
q()
q()
q()
q()
q()
q()
library('stR')
plot(calls)
plot(electricity)
plot(ausbeer)
library('forecast')
plot(ausbeer)
library('fpp2')
plot(ausbeer)
q()
q()
q()
q()
q()
q()
q()
q()
q()
q()
q()
q()
q()
q()
library('fpp2')
q()
q()
q()
q()
libaray(fpp2)
library(fpp2)
a <- auscafe
library('stR')
decomp<-AutoSTR(auscafe, trace =  FALSE)
plot(decomp)
q()
q()
q()
q()
q()
q()
library('fma')
library("jsonlite")
rm(list = ls())
source('/Users/thanapolphungtua-eng/source_code/R_programming/evaluation_ESTL/utils.R')
# Fig 1a : walkJog
FOLDER_DATASET <- '/Users/thanapolphungtua-eng/source_code/ESTL/dataset/03_Long_length_dataset/'
all_files <- list.files(FOLDER_DATASET, full.names = TRUE)
json_files <- all_files[grep("\\.json$", all_files)]
json_data <- fromJSON(txt = json_files[1])
ts_data <- json_data$ts
par(mar = c(4.2, 5, 1, 1),cex.lab = 2, cex.axis = 2)
plot(ts_data,type='l',
xlab="timestamp", ylab="Value",xlim=c(3000, 4200)
)
abline(v=3800, col=adjustcolor("red", alpha = 0.5), lty=2, lwd=3)
# Fig 1b : lynx
par(mar = c(4.2, 5, 1, 1),cex.lab = 2, cex.axis = 2)
plot(lynx,
xlab="Year", ylab="Popluation",xlim=c(1820, 1880)
)
q()
q()
q()
q()
https://cran.r-project.org/web/packages/quantreg/index.html
toBibtex(citation("xaringan"))
toBibtex(citation("stR"))
q()
q()
q()
q()
q()
q()
q()
help(checkresiduals)
package(forecast)
library(forecast)
help(checkresiduals)
checkresiduals(CO2)
library('stR')
decomp<-AutoSTR(CO2, trace =  FALSE)
decomp<-AutoSTR(co2, trace =  FALSE)
plot(decomp)
checkresiduals(decomp)
checkresiduals(decomp$output$random$data)
checkresiduals(co2)
setwd("~/source_code/R_programming/evaluation_ESTL/eva_decomposition")
library('fma')
library("jsonlite")
rm(list = ls())
source('/Users/thanapolphungtua-eng/source_code/R_programming/evaluation_ESTL/utils.R')
# Fig 1a : walkJog
FOLDER_DATASET <- '/Users/thanapolphungtua-eng/source_code/ESTL/dataset/03_Long_length_dataset/'
all_files <- list.files(FOLDER_DATASET, full.names = TRUE)
json_files <- all_files[grep("\\.json$", all_files)]
json_data <- fromJSON(txt = json_files[1])
ts_data <- json_data$ts
par(mar = c(4.2, 5, 1, 1),cex.lab = 2, cex.axis = 2)
plot(ts_data,type='l',
xlab="timestamp", ylab="Value",xlim=c(3000, 4200)
)
abline(v=3800, col=adjustcolor("red", alpha = 0.5), lty=2, lwd=3)
# Fig 1b : lynx
par(mar = c(4.2, 5, 1, 1),cex.lab = 2, cex.axis = 2)
plot(lynx,
xlab="Year", ylab="Popluation",xlim=c(1820, 1880)
)
library('fma')
library("jsonlite")
rm(list = ls())
source('/Users/thanapolphungtua-eng/source_code/R_programming/evaluation_ESTL/utils.R')
# Fig 1a : walkJog
FOLDER_DATASET <- '/Users/thanapolphungtua-eng/source_code/ESTL/dataset/03_Long_length_dataset/'
all_files <- list.files(FOLDER_DATASET, full.names = TRUE)
json_files <- all_files[grep("\\.json$", all_files)]
json_data <- fromJSON(txt = json_files[1])
ts_data <- json_data$ts
par(mar = c(4.2, 5, 1, 1),cex.lab = 2, cex.axis = 2)
plot(ts_data,type='l',
xlab="timestamp", ylab="Angular velocity",xlim=c(3000, 4200)
)
abline(v=3800, col=adjustcolor("red", alpha = 0.7), lty=2, lwd=3)
# Fig 1b : lynx
par(mar = c(4.2, 5, 1, 1),cex.lab = 2, cex.axis = 2)
plot(lynx,
xlab="Year", ylab="Popluation",xlim=c(1820, 1880)
)
library('fma')
library("jsonlite")
rm(list = ls())
source('/Users/thanapolphungtua-eng/source_code/R_programming/evaluation_ESTL/utils.R')
# Fig 1a : walkJog
FOLDER_DATASET <- '/Users/thanapolphungtua-eng/source_code/ESTL/dataset/03_Long_length_dataset/'
all_files <- list.files(FOLDER_DATASET, full.names = TRUE)
json_files <- all_files[grep("\\.json$", all_files)]
json_data <- fromJSON(txt = json_files[1])
ts_data <- json_data$ts
par(mar = c(4.2, 5, 1, 1),cex.lab = 2, cex.axis = 2)
plot(ts_data,type='l',
xlab="timestamp", ylab="Angular velocity",xlim=c(3400, 4100)
)
abline(v=3800, col=adjustcolor("red", alpha = 0.7), lty=2, lwd=3)
# Fig 1b : lynx
par(mar = c(4.2, 5, 1, 1),cex.lab = 2, cex.axis = 2)
plot(lynx,
xlab="Year", ylab="Popluation",xlim=c(1830, 1880)
)
library('fma')
library("jsonlite")
rm(list = ls())
source('/Users/thanapolphungtua-eng/source_code/R_programming/evaluation_ESTL/utils.R')
# Fig 1a : walkJog
FOLDER_DATASET <- '/Users/thanapolphungtua-eng/source_code/ESTL/dataset/03_Long_length_dataset/'
all_files <- list.files(FOLDER_DATASET, full.names = TRUE)
json_files <- all_files[grep("\\.json$", all_files)]
json_data <- fromJSON(txt = json_files[1])
ts_data <- json_data$ts
par(mar = c(4.2, 5, 1, 1),cex.lab = 2, cex.axis = 2)
plot(ts_data,type='l',
xlab="timestamp", ylab="Angular velocity",xlim=c(3000, 4100)
)
abline(v=3800, col=adjustcolor("red", alpha = 0.7), lty=2, lwd=3)
# Fig 1b : lynx
par(mar = c(4.2, 5, 1, 1),cex.lab = 2, cex.axis = 2)
plot(lynx,
xlab="Year", ylab="Popluation",xlim=c(1830, 1880)
)
library('fma')
library("jsonlite")
rm(list = ls())
# source('/Users/thanapolphungtua-eng/source_code/R_programming/evaluation_ESTL/utils.R')
# Fig 1a : walkJog
FOLDER_DATASET <- '/Users/thanapolphungtua-eng/source_code/ESTL/dataset/03_Long_length_dataset/'
all_files <- list.files(FOLDER_DATASET, full.names = TRUE)
json_files <- all_files[grep("\\.json$", all_files)]
json_data <- fromJSON(txt = json_files[1])
ts_data <- json_data$ts
par(mar = c(4.2, 5, 1, 1),cex.lab = 2, cex.axis = 2)
plot(ts_data,type='l',
xlab="timestamp", ylab="Angular velocity",xlim=c(3000, 4100)
)
abline(v=3800, col=adjustcolor("red", alpha = 0.7), lty=2, lwd=3)
# Fig 1b : lynx
par(mar = c(4.2, 5, 1, 1),cex.lab = 2, cex.axis = 2)
plot(lynx,
xlab="Year", ylab="Popluation",xlim=c(1830, 1880)
)
setwd("~/source_code/SSTD_PKDD")
library('fma')
library("jsonlite")
rm(list = ls())
# source('/Users/thanapolphungtua-eng/source_code/R_programming/evaluation_ESTL/utils.R')
# Fig 1a : walkJog
FOLDER_DATASET <- 'dataset/02_Real1/'
all_files <- list.files(FOLDER_DATASET, full.names = TRUE)
json_files <- all_files[grep("\\.json$", all_files)]
json_data <- fromJSON(txt = json_files[1])
library('fma')
library("jsonlite")
rm(list = ls())
# source('/Users/thanapolphungtua-eng/source_code/R_programming/evaluation_ESTL/utils.R')
# Fig 1a : walkJog
FOLDER_DATASET <- 'dataset/02_Real1/'
all_files <- list.files(FOLDER_DATASET, full.names = TRUE)
json_files <- all_files[grep("\\.json$", all_files)]
json_data <- fromJSON(txt = json_files[1])
# Fig 1a : walkJog
FOLDER_DATASET <- 'dataset/02_Real1/'
all_files <- list.files(FOLDER_DATASET, full.names = TRUE)
json_files <- all_files[grep("\\.json$", all_files)]
json_data <- fromJSON(txt = json_files[1])
ts_data <- json_data$ts
par(mar = c(4.2, 5, 1, 1),cex.lab = 2, cex.axis = 2)
json_data <- fromJSON(txt = json_files[1])
FOLDER_DATASET <- 'dataset/02_Real1_dataesets/'
all_files <- list.files(FOLDER_DATASET, full.names = TRUE)
json_files <- all_files[grep("\\.json$", all_files)]
json_data <- fromJSON(txt = json_files[1])
# Fig 1a : walkJog
FOLDER_DATASET <- 'dataset/02_Real1_dataesets/'
all_files <- list.files(FOLDER_DATASET, full.names = TRUE)
json_files <- all_files[grep("\\.json$", all_files)]
json_data <- fromJSON(txt = json_files[1])
library('fma')
library("jsonlite")
rm(list = ls())
# source('/Users/thanapolphungtua-eng/source_code/R_programming/evaluation_ESTL/utils.R')
# Fig 1a : walkJog
FOLDER_DATASET <- '/dataset/02_Real1_dataesets/'
all_files <- list.files(FOLDER_DATASET, full.names = TRUE)
json_files <- all_files[grep("\\.json$", all_files)]
json_data <- fromJSON(txt = json_files[1])
setwd("~/source_code/SSTD_PKDD")
# Fig 1a : walkJog
FOLDER_DATASET <- '/dataset/02_Real1_dataesets/'
all_files <- list.files(FOLDER_DATASET, full.names = TRUE)
json_files <- all_files[grep("\\.json$", all_files)]
json_data <- fromJSON(txt = json_files[1])
# Fig 1a : walkJog
FOLDER_DATASET <- 'dataset/02_Real1_dataesets/'
all_files <- list.files(FOLDER_DATASET, full.names = TRUE)
json_files <- all_files[grep("\\.json$", all_files)]
# Fig 1a : walkJog
FOLDER_DATASET <- 'dataset/02_Real1_dataesets'
# Fig 1a : walkJog
FOLDER_DATASET <- 'dataset/02_Real1_datasets'
all_files <- list.files(FOLDER_DATASET, full.names = TRUE)
json_files <- all_files[grep("\\.json$", all_files)]
json_data <- fromJSON(txt = json_files[1])
FOLDER_DATASET <- 'dataset/02_Real1_datasets'
FILE_NAME <- '01_WalkJogRun1.json'
json_data <- fromJSON(txt = json_files[1])
ts_data <- json_data$ts
par(mar = c(4.2, 5, 1, 1),cex.lab = 2, cex.axis = 2)
plot(ts_data,type='l',
xlab="timestamp", ylab="Angular velocity",xlim=c(3000, 4100)
)
abline(v=3800, col=adjustcolor("red", alpha = 0.7), lty=2, lwd=3)
# Fig 1b : lynx
par(mar = c(4.2, 5, 1, 1),cex.lab = 2, cex.axis = 2)
plot(lynx,
xlab="Year", ylab="Popluation",xlim=c(1830, 1880)
)
FOLDER_DATASET <- 'dataset/02_Real1_datasets'
FILE_NAME <- '01_WalkJogRun1.json'
json_data <- fromJSON(txt = json_files[1])
ts_data <- json_data$ts
par(mar = c(4.2, 5, 1, 1),cex.lab = 2, cex.axis = 2)
plot(ts_data,type='l',
xlab="timestamp", ylab="Angular velocity",xlim=c(3100, 4100)
)
abline(v=3800, col=adjustcolor("red", alpha = 0.7), lty=2, lwd=3)
# Fig 1a : walkJog
FOLDER_DATASET <- 'dataset/02_Real1_datasets'
FILE_NAME <- '01_WalkJogRun1.json'
json_data <- fromJSON(txt = json_files[1])
ts_data <- json_data$ts
par(mar = c(4.2, 5, 1, 1),cex.lab = 2, cex.axis = 2)
plot(ts_data,type='l',
xlab="timestamp", ylab="Angular velocity",xlim=c(3100, 4100)
)
abline(v=3800, col=adjustcolor("red", alpha = 0.7), lty=2, lwd=3)
# Fig 1b : lynx
par(mar = c(4.2, 5, 1, 1),cex.lab = 2, cex.axis = 2)
plot(lynx,
xlab="Year", ylab="Popluation",xlim=c(1830, 1880)
)
abline(v=1860, col=adjustcolor("red", alpha = 0.7), lty=2, lwd=3)
abline(v=1870, col=adjustcolor("red", alpha = 0.7), lty=2, lwd=3)
setwd("~/source_code/R_programming/evaluation_ESTL/ECMLPKDD_plotting")
setwd("~/source_code/SSTD_PKDD")
# Fig 1a : walkJog
setwd('dataset/02_Real1_datasets')
FILE_NAME <- '01_WalkJogRun1.json'
json_data <- fromJSON(txt = FILE_NAME)
library('fma')
library("jsonlite")
rm(list = ls())
# Fig 1a : walkJog
setwd('dataset/02_Real1_datasets')
setwd("~/source_code/SSTD_PKDD")
library('fma')
library("jsonlite")
rm(list = ls())
# Fig 1a : walkJog
setwd('dataset/02_Real1_datasets')
FILE_NAME <- '01_WalkJogRun1.json'
json_data <- fromJSON(txt = FILE_NAME)
ts_data <- json_data$ts
par(mar = c(4.2, 5, 1, 1),cex.lab = 2, cex.axis = 2)
plot(ts_data,type='l',
xlab="timestamp", ylab="Angular velocity",xlim=c(3100, 4100)
)
abline(v=3800, col=adjustcolor("red", alpha = 0.7), lty=2, lwd=3)
# Fig 1b : lynx
par(mar = c(4.2, 5, 1, 1),cex.lab = 2, cex.axis = 2)
plot(lynx,
xlab="Year", ylab="Popluation",xlim=c(1830, 1880)
)
abline(v=1860, col=adjustcolor("red", alpha = 0.7), lty=2, lwd=3)
abline(v=1870, col=adjustcolor("red", alpha = 0.7), lty=2, lwd=3)
q()
